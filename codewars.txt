6kyu-Javascript

https://www.codewars.com/kata/514b92a657cdc65150000006/javascript

function solution(number){
  let sum=0
  if (number<0){
    return 0
    console.log('trip')
  }
  for (let i=0; i<number; i++){
    if (i%3===0 || i%5===0){
      sum+=i
    }
  }
  return sum
}

https://www.codewars.com/kata/525f50e3b73515a6db000b83/solutions/javascript


function createPhoneNumber(numbers){
  let area = numbers.slice(0,3).join('')
  let first = numbers.slice(3,6).join('')
  let second = numbers.slice(6,10).join('')
  return `(${area}) ${first}-${second}`
}



5kyu - python

https://www.codewars.com/kata/525c65e51bf619685c000059/python

def cakes(recipe, available):
    bakeable=float('inf')
    for key in recipe.keys():
        if key not in available:
            return 0
        check=available[key]//recipe[key]
        if check < bakeable:
            bakeable=check
    return bakeable

https://www.codewars.com/kata/52685f7382004e774f0001f7/python
Y tu brute(force)?
What the hell is divmod?
Good place for an adjust helper function

def make_readable(seconds):
    hours=seconds//3600
    if hours<10:
        hoursAdjust=f'0{hours}'
    else:
        hoursAdjust=f'{hours}'
    minutes=(seconds-(int(hours)*3600))//60
    if minutes<10:
        minutesAdjust=f'0{minutes}'
    else:
        minutesAdjust=f'{minutes}'
    secondos=int(seconds-(int(hours)*3600)-minutes*60)
    if secondos<10:
        secondosAdjust=f'0{secondos}'
    else:
        secondosAdjust=f'{secondos}'
    return f'{hoursAdjust}:{minutesAdjust}:{secondosAdjust}'

https://www.codewars.com/kata/52bc74d4ac05d0945d00054e/python

def first_non_repeating_letter(s):
    divy={}
    answer=''
    check=[]
    for letter in s:
        if letter in divy:
            divy[letter]+=1
        else:
            divy[letter]=1
    keys=divy.keys()
    for key in keys:
        if divy[key]==1:
            if key.isupper():
                if key.lower() in divy:
                    divy[key]=2
                    divy[key.lower()]=2
                else:
                    check.append(key)
            elif key.islower():
                if key.upper() in divy:
                    divy[key]=2
                    divy[key.upper()]=2
                else:
                    check.append(key)
            else:
                check.append(key)
    if not check:
        return answer
    else:
        return check[0]


Didn't get this one
https://www.codewars.com/kata/5277c8a221e209d3f6000b56/train/python
Tried recursion but I hit a wall
Got through these test cases 
assert_valid( "()" )
		assert_invalid( "(}" )
		assert_valid( "[]" )
		assert_invalid("[(])")
		assert_valid( "{}" )
		assert_valid( "{}()[]" )
		assert_valid( "([{}])" )
		assert_invalid( "([}{])" )  <-until here, think it had something to do with my i++

openers = '({['
closers = ')}]'

def openCloser(opener, string, i, cond):
    print(string)
    if cond == 'False':
        print('false found')
        return ('False',i)

    if opener == '(':
        closer = ')'
    elif opener == '{':
        closer = '}'
    elif opener == '[':
        closer = ']'

    if string[i + 1] == closer:
        print('closer match')
        return ('True',i+1)

    elif string[i + 1] in openers:
        newOpen = string[i + 1]
        i+=1
        print('new open')
        print(newOpen)
        return openCloser(newOpen, string, i, 'True')
    else:
        cond = 'False'
        print('its fucked')
        return (cond,i)

def valid_braces(string):
    cond = 'True'
    i = 0
    
    if string[i] in closers:
        cond = 'False'
        return False

    while i < len(string):
        if openCloser(string[i], string, i, True)[0]=='False':
            return False
        i=openCloser(string[i], string, i, True)[1]
        i += 1
    return True
